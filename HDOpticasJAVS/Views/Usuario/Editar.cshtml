@model HDOpticasJAVS.Usuario

@{
    ViewBag.Title = "Editar Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool estaInactivo = Model.Estado == "I";
    var atributos = new Dictionary<string, object> { { "class", "form-control" } };

    if (estaInactivo)
    {
        atributos.Add("disabled", "disabled");
    }
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header text-center bg-primary text-white">
                    <h2 class="titulo">Editar Usuario</h2>
                </div>
                <div class="card-body bg-dark">
                    @Html.AntiForgeryToken()
                    @using (Html.BeginForm("Editar", "Usuario", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Cedula)

                        <div class="form-group">
                            <label>Cédula:</label>
                            @Html.TextBoxFor(model => model.Cedula, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                        <div class="form-group">
                            <label>Nombre:</label>
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", required = "required" })
                        </div>
                        <div class="form-group">
                            <label>Primer Apellido:</label>
                            @Html.TextBoxFor(model => model.Apellido1, new { @class = "form-control", required = "required" })
                        </div>
                        <div class="form-group">
                            <label>Segundo Apellido:</label>
                            @Html.TextBoxFor(model => model.Apellido2, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            <label>Correo:</label>
                            @Html.TextBoxFor(model => model.Correo, new { @class = "form-control", type = "email", required = "required" })
                        </div>
                        <div class="form-group">
                            <label>Fecha de Nacimiento:</label>
                            @Html.TextBoxFor(model => model.FechaNacimiento, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                        <div class="form-group">
                            <label>Contraseña:</label>
                            <div class="input-group">
                                @Html.TextBox("Contrasenia", "********", new { @class = "form-control", @readonly = "readonly", type = "password" })
                                <div class="input-group-append">
                                    <button id="btnEnviarCorreo" type="button" class="btn btn-danger" onclick="enviarCorreoRecuperacion('@Model.Correo')">Enviar cambio</button>
                                </div>
                            </div>
                            <small class="form-text text-muted" style="color: #f8f9fa;">No editable. Puedes enviar un enlace para cambiarla.</small>
                        </div>
                        <div class="form-group">
                            <label>Rol:</label>

                            @Html.DropDownListFor(model => model.Id_Rol,
                                (List<SelectListItem>)ViewBag.Roles,
                                atributos
                            )

                            @if (estaInactivo)
                            {
                                @Html.HiddenFor(model => model.Id_Rol)
                            }
                        </div>

                        <div class="form-group">
                            <label>Fecha de Bloqueo Hasta:</label>
                            @Html.TextBoxFor(model => model.FechaBloqueoHasta, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
                            <small class="form-text text-muted" style="color: #f8f9fa;">Dejar en blanco si no desea establecer un bloqueo.</small>
                        </div>

                        <div class="form-group">
                            <label>Estado:</label>
                            @Html.DropDownListFor(model => model.Estado,
                                new SelectList(new[] {
                                    new { Value = "A", Text = "Activo" },
                                    new { Value = "I", Text = "Inactivo" }
                                }, "Value", "Text", Model.Estado),
                                htmlAttributes: new { @class = "form-control" })
                        </div>



                        <button type="submit" class="btn btn-warning btn-block">Actualizar</button>
                    }
                    @using (Html.BeginForm("RevertirUltimoCambio", "Usuario", FormMethod.Post))
                    {

                        @Html.Hidden("cedula", Model.Cedula)
                        <button type="submit" class="btn btn-warning" style="margin-top: 10px;">
                            Revertir Último Cambio
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    function enviarCorreoRecuperacion(correo) {
        if (!correo) {
            alert("El usuario no tiene un correo asignado.");
            return;
        }

        if (confirm("¿Deseas enviar un enlace para restablecer la contraseña?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("EnviarRecuperacion", "Usuario")',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    correo: correo
                },
                success: function (response) {
                    if (response.ok) {
                        alert(response.mensaje);
                    } else {
                        alert("Error: " + response);
                    }
                },
                error: function () {
                    alert("Error al enviar la solicitud.");
                }
            });
        }
    }
    </script>
}